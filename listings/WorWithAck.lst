C51 COMPILER V7.20   WORWITHACK                                                            03/07/2007 19:19:55 PAGE 1   


C51 COMPILER V7.20, COMPILATION OF MODULE WORWITHACK
OBJECT MODULE PLACED IN .\objects\WorWithAck.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE WorWithAck.c OMF2 BROWSE INCDIR(..\..\..\..\..\Inc;..\..\..\..\..\lib) DEFI
                    -NE(FREQ_2_4,STAND_ALONE) DEBUG PRINT(.\listings\WorWithAck.lst) OBJECT(.\objects\WorWithAck.obj)

line level    source

   1          /*******************************************************************************************************
   2           *                                                                                                     *
   3           *        **********                                                                                   *
   4           *       ************                                                                                  *
   5           *      ***        ***                                                                                 *
   6           *      ***   +++   ***                                                                                *
   7           *      ***   + +   ***     This example shows how to use the Wake-on-Radio function of the CCxx00     *
   8           *      ***   +             in a simple "packet burst with ACK" protocol.                              *
   9           *      ***   + +   ***                                                                                *
  10           *      ***   +++   ***     WorWithAck.c                                                               *
  11           *      ***        ***                                                                                 *
  12           *       ************                                                                                  *
  13           *        **********                                                                                   *
  14           *                                                                                                     *
  15           *******************************************************************************************************
  16           * Compiler:                Keil C51 V7.50                                                             *
  17           * Target platform:         Chipcon CCxxx0 (Silabs F320)                                               *
  18           * Author:                  ESY                                                                        *
  19           *******************************************************************************************************
  20           * Revision history:     See end of file                                                               *
  21           *******************************************************************************************************/
  22          #include <Chipcon\srf04\regssrf04.h>
  23          #include <Chipcon\srf04\halsrf04.h>
  24          #include <Chipcon\srf04\ebsrf04.h>
  25          #include <WorWithAck.h>
  26          
  27          
  28          
  29          
  30          //-------------------------------------------------------------------------------------------------------
  31          // DESCRIPTION:
  32          //      This example is an improved implementation of the simple WOR example described in App. Note 38.
  33          //      A transmitter sending packets with control commands to a receiver. WOR is used to reduce power 
  34          //      consumption at the receiver side.
  35          //      The transmitter starts bursting identical packets until it gets an ACK back from receiver.
  36          //      This means that there, in contrast to the simple WOR example, is no fixed number of packets 
  37          //      in a burst. One evaluation board (EB) is set up as transmitter, and the other as a receiver 
  38          //      (RX/WOR unit). If the joystick position is changed on the transmitter board, data containing 
  39          //      info about the new position are transmitted to the receiver and the joystick position is 
  40          //      displayed on the LCD of this EB. Please see App. Note 38 for more details.
  41          //      
  42          //      RX UNIT:
  43          //          * Move joystick right to choose RX
  44          //          * Push the S1 button to confirm your choice. 
  45          //          After the unit has been configured, the yellow LED will be on.
  46          //
  47          //          GLED: Toggles when a packet has been received successfully.
  48          //          RLED: Toggles when an invalid packet has been received. 
  49          //          BLED: Toggles when an ACK is sent.
  50          //
  51          //      TX UNIT:
  52          //          * Move joystick left to choose TX
  53          //          * Push the S1 button to confirm your choice. 
  54          //          After the unit has been configured, the yellow LED will turn on.
C51 COMPILER V7.20   WORWITHACK                                                            03/07/2007 19:19:55 PAGE 2   

  55          //
  56          //          BLED: Toggles when a packet has been sent.
  57          //          GLED: Toggles every time a valid packet (ACK) has been received.
  58          //          RLED: Toggles every time an invalid packet has been received.
  59          //
  60          //      On the transmitter, you are now able to push the joystick button or move it up, 
  61          //      down, left or right. This will start the packet burst and the number of packets sent in the 
  62          //      burst will be displayed on the LCD. The number of packets in a burst is variable, depending on
  63          //      when an ACK is received. Normally, less than 305 packets need to be sent.One should not move 
  64          //      the joystick to a new position before the previous burst transmission has completed. 
  65          //
  66          //
  67          //      The receiver will automatically enter the WOR mode, waiting for packets. 
  68          //
  69          //      The LCD will continuously display how many valid packets have been received together with 
  70          //      the position of the joystick on the transmitter.
  71          //      
  72          //      The program can be terminated by pressing the S1 button after the setup has been done. 
  73          //      This will turn off the yellow LED.
  74          //
  75          //      Current config specs
  76          //
  77          //          Common Settings:
  78          //              Packet format = 4B preamble + 4B sync word + 1B payload + 2B CRC = 11 Bytes
  79          //
  80          //          TX Unit Settings:
  81          //              Packet interval:        1.0 ms
  82          //              Packet send time:       ~ 11 B * 8 bit/B / 250 kbps = 352 us
  83          //              Tx duty cycle:          ~ 352 us / 1.0 ms = 35.2 %
  84          //              RX timeout (get ACK):   325 us                      (word sync search timeout)
  85          //              RX duty cycle:          325 us / 1000 us = 32.5 %
  86          //
  87          //          RX/WOR Unit Settings:
  88          //              Event0 timeout:         300 ms                      (radio RX polling period)
  89          //              Event1 timeout:         ~ 345 us (f_xosc = 26 MHz)                                        
             -                       start RX)
  90          //              Rx timeout:             ~ 1.172 ms
  91          //              Rx duty cycle:          ~ 1.172 ms / 300 ms = 0.391 %
  92          //              ACK send time:          ~ 11B * 8 bit/B / 250 kbps = 352 us
  93          //              TX duty cycle (max):    352 us / 300 ms = 0.117 %
  94          //-------------------------------------------------------------------------------------------------------
  95          
  96          
  97          
  98          
  99          //-------------------------------------------------------------------------------------------------------
 100          // Global Variables
 101          
 102          
 103          
 104          // Defining some external variables
 105          
 106          BYTE xdata rxBuffer[3];                 // Max received packet length = 1B
 107          
 108          //-------------------------------------------------------------------------------------------------------
 109          
 110          
 111          
 112          
 113          //-------------------------------------------------------------------------------------------------------
 114          //  void main(void)
 115          //
C51 COMPILER V7.20   WORWITHACK                                                            03/07/2007 19:19:55 PAGE 3   

 116          //  DESCRIPTION:
 117          //      This function takes care of all the MCU initialization and radio configuration. 
 118          //-------------------------------------------------------------------------------------------------------
 119          void main (void) {
 120   1         #ifdef STAND_ALONE
 121   1      
 122   1              // Select the Internal Oscillator as Multiplier input source and disable the watchdog timer
 123   1              // SYSCLK = 4X Clock Multiplier / 2
 124   1              CLOCK_INIT();
 125   1          #endif
 126   1      
 127   1          // Set up the crossbar and I/O ports to communicate with the SmartRF04EB peripherals
 128   1          IO_PORT_INIT();
 129   1      
 130   1          // Initialize the LCD display. The SMBus uses timer 0 to generate SC
 131   1      
 132   1          SPI_INIT(SCLK_6_MHZ);
 133   1      
 134   1          POWER_UP_RESET_CCxxx0();
 135   1          
 136   1          halRfWriteRfSettings(&rfSettings);
 137   1          
 138   1          halSpiWriteReg(CCxxx0_PATABLE, paTable);
 139   1      
 140   1              runReceiver(); 
 141   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    142    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      3    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
